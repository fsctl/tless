// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rpc/rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DaemonCtlClient is the client API for DaemonCtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonCtlClient interface {
	// Sends the console user's username+homedir to establish connectivity
	// and initialize the daemon with correct config.toml path
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// Provides daemon version
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// Gets the status of the daemon
	Status(ctx context.Context, in *DaemonStatusRequest, opts ...grpc.CallOption) (*DaemonStatusResponse, error)
	// Commands daemon to check connection to object store and report back
	CheckConn(ctx context.Context, in *CheckConnRequest, opts ...grpc.CallOption) (*CheckConnResponse, error)
	// Commands to synchronize config between client and daemon
	ReadDaemonConfig(ctx context.Context, in *ReadConfigRequest, opts ...grpc.CallOption) (*ReadConfigResponse, error)
	WriteToDaemonConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error)
	// Backup command
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	CancelBackup(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	// Commands for retrieving and pruning snapshots
	ReadAllSnapshotsMetadata(ctx context.Context, in *ReadAllSnapshotsMetadataRequest, opts ...grpc.CallOption) (*ReadAllSnapshotsMetadataResponse, error)
	ReadSnapshotPaths(ctx context.Context, in *ReadSnapshotPathsRequest, opts ...grpc.CallOption) (DaemonCtl_ReadSnapshotPathsClient, error)
	DeleteSnapshots(ctx context.Context, in *DeleteSnapshotsRequest, opts ...grpc.CallOption) (DaemonCtl_DeleteSnapshotsClient, error)
	// Restore command
	Restore(ctx context.Context, opts ...grpc.CallOption) (DaemonCtl_RestoreClient, error)
	CancelRestore(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	// Special operations
	WipeCloud(ctx context.Context, in *WipeCloudRequest, opts ...grpc.CallOption) (*WipeCloudResponse, error)
	// Bucket operations
	ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error)
	MakeBucket(ctx context.Context, in *MakeBucketRequest, opts ...grpc.CallOption) (*MakeBucketResponse, error)
	CheckBucketPassword(ctx context.Context, in *CheckBucketPasswordRequest, opts ...grpc.CallOption) (*CheckBucketPasswordResponse, error)
	// Misc RPCs
	LogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (DaemonCtl_LogStreamClient, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
}

type daemonCtlClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonCtlClient(cc grpc.ClientConnInterface) DaemonCtlClient {
	return &daemonCtlClient{cc}
}

func (c *daemonCtlClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) Status(ctx context.Context, in *DaemonStatusRequest, opts ...grpc.CallOption) (*DaemonStatusResponse, error) {
	out := new(DaemonStatusResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) CheckConn(ctx context.Context, in *CheckConnRequest, opts ...grpc.CallOption) (*CheckConnResponse, error) {
	out := new(CheckConnResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/CheckConn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) ReadDaemonConfig(ctx context.Context, in *ReadConfigRequest, opts ...grpc.CallOption) (*ReadConfigResponse, error) {
	out := new(ReadConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/ReadDaemonConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) WriteToDaemonConfig(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error) {
	out := new(WriteConfigResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/WriteToDaemonConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) CancelBackup(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/CancelBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) ReadAllSnapshotsMetadata(ctx context.Context, in *ReadAllSnapshotsMetadataRequest, opts ...grpc.CallOption) (*ReadAllSnapshotsMetadataResponse, error) {
	out := new(ReadAllSnapshotsMetadataResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/ReadAllSnapshotsMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) ReadSnapshotPaths(ctx context.Context, in *ReadSnapshotPathsRequest, opts ...grpc.CallOption) (DaemonCtl_ReadSnapshotPathsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DaemonCtl_ServiceDesc.Streams[0], "/rpc.DaemonCtl/ReadSnapshotPaths", opts...)
	if err != nil {
		return nil, err
	}
	x := &daemonCtlReadSnapshotPathsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DaemonCtl_ReadSnapshotPathsClient interface {
	Recv() (*ReadSnapshotPathsResponse, error)
	grpc.ClientStream
}

type daemonCtlReadSnapshotPathsClient struct {
	grpc.ClientStream
}

func (x *daemonCtlReadSnapshotPathsClient) Recv() (*ReadSnapshotPathsResponse, error) {
	m := new(ReadSnapshotPathsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *daemonCtlClient) DeleteSnapshots(ctx context.Context, in *DeleteSnapshotsRequest, opts ...grpc.CallOption) (DaemonCtl_DeleteSnapshotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DaemonCtl_ServiceDesc.Streams[1], "/rpc.DaemonCtl/DeleteSnapshots", opts...)
	if err != nil {
		return nil, err
	}
	x := &daemonCtlDeleteSnapshotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DaemonCtl_DeleteSnapshotsClient interface {
	Recv() (*DeleteSnapshotsResponse, error)
	grpc.ClientStream
}

type daemonCtlDeleteSnapshotsClient struct {
	grpc.ClientStream
}

func (x *daemonCtlDeleteSnapshotsClient) Recv() (*DeleteSnapshotsResponse, error) {
	m := new(DeleteSnapshotsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *daemonCtlClient) Restore(ctx context.Context, opts ...grpc.CallOption) (DaemonCtl_RestoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &DaemonCtl_ServiceDesc.Streams[2], "/rpc.DaemonCtl/Restore", opts...)
	if err != nil {
		return nil, err
	}
	x := &daemonCtlRestoreClient{stream}
	return x, nil
}

type DaemonCtl_RestoreClient interface {
	Send(*RestoreRequest) error
	CloseAndRecv() (*RestoreResponse, error)
	grpc.ClientStream
}

type daemonCtlRestoreClient struct {
	grpc.ClientStream
}

func (x *daemonCtlRestoreClient) Send(m *RestoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *daemonCtlRestoreClient) CloseAndRecv() (*RestoreResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RestoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *daemonCtlClient) CancelRestore(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/CancelRestore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) WipeCloud(ctx context.Context, in *WipeCloudRequest, opts ...grpc.CallOption) (*WipeCloudResponse, error) {
	out := new(WipeCloudResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/WipeCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error) {
	out := new(ListBucketsResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/ListBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) MakeBucket(ctx context.Context, in *MakeBucketRequest, opts ...grpc.CallOption) (*MakeBucketResponse, error) {
	out := new(MakeBucketResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/MakeBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) CheckBucketPassword(ctx context.Context, in *CheckBucketPasswordRequest, opts ...grpc.CallOption) (*CheckBucketPasswordResponse, error) {
	out := new(CheckBucketPasswordResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/CheckBucketPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonCtlClient) LogStream(ctx context.Context, in *LogStreamRequest, opts ...grpc.CallOption) (DaemonCtl_LogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DaemonCtl_ServiceDesc.Streams[3], "/rpc.DaemonCtl/LogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &daemonCtlLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DaemonCtl_LogStreamClient interface {
	Recv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type daemonCtlLogStreamClient struct {
	grpc.ClientStream
}

func (x *daemonCtlLogStreamClient) Recv() (*LogStreamResponse, error) {
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *daemonCtlClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/rpc.DaemonCtl/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonCtlServer is the server API for DaemonCtl service.
// All implementations must embed UnimplementedDaemonCtlServer
// for forward compatibility
type DaemonCtlServer interface {
	// Sends the console user's username+homedir to establish connectivity
	// and initialize the daemon with correct config.toml path
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// Provides daemon version
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// Gets the status of the daemon
	Status(context.Context, *DaemonStatusRequest) (*DaemonStatusResponse, error)
	// Commands daemon to check connection to object store and report back
	CheckConn(context.Context, *CheckConnRequest) (*CheckConnResponse, error)
	// Commands to synchronize config between client and daemon
	ReadDaemonConfig(context.Context, *ReadConfigRequest) (*ReadConfigResponse, error)
	WriteToDaemonConfig(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error)
	// Backup command
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	CancelBackup(context.Context, *CancelRequest) (*CancelResponse, error)
	// Commands for retrieving and pruning snapshots
	ReadAllSnapshotsMetadata(context.Context, *ReadAllSnapshotsMetadataRequest) (*ReadAllSnapshotsMetadataResponse, error)
	ReadSnapshotPaths(*ReadSnapshotPathsRequest, DaemonCtl_ReadSnapshotPathsServer) error
	DeleteSnapshots(*DeleteSnapshotsRequest, DaemonCtl_DeleteSnapshotsServer) error
	// Restore command
	Restore(DaemonCtl_RestoreServer) error
	CancelRestore(context.Context, *CancelRequest) (*CancelResponse, error)
	// Special operations
	WipeCloud(context.Context, *WipeCloudRequest) (*WipeCloudResponse, error)
	// Bucket operations
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	MakeBucket(context.Context, *MakeBucketRequest) (*MakeBucketResponse, error)
	CheckBucketPassword(context.Context, *CheckBucketPasswordRequest) (*CheckBucketPasswordResponse, error)
	// Misc RPCs
	LogStream(*LogStreamRequest, DaemonCtl_LogStreamServer) error
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	mustEmbedUnimplementedDaemonCtlServer()
}

// UnimplementedDaemonCtlServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonCtlServer struct {
}

func (UnimplementedDaemonCtlServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedDaemonCtlServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedDaemonCtlServer) Status(context.Context, *DaemonStatusRequest) (*DaemonStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedDaemonCtlServer) CheckConn(context.Context, *CheckConnRequest) (*CheckConnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConn not implemented")
}
func (UnimplementedDaemonCtlServer) ReadDaemonConfig(context.Context, *ReadConfigRequest) (*ReadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDaemonConfig not implemented")
}
func (UnimplementedDaemonCtlServer) WriteToDaemonConfig(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToDaemonConfig not implemented")
}
func (UnimplementedDaemonCtlServer) Backup(context.Context, *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedDaemonCtlServer) CancelBackup(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBackup not implemented")
}
func (UnimplementedDaemonCtlServer) ReadAllSnapshotsMetadata(context.Context, *ReadAllSnapshotsMetadataRequest) (*ReadAllSnapshotsMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllSnapshotsMetadata not implemented")
}
func (UnimplementedDaemonCtlServer) ReadSnapshotPaths(*ReadSnapshotPathsRequest, DaemonCtl_ReadSnapshotPathsServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadSnapshotPaths not implemented")
}
func (UnimplementedDaemonCtlServer) DeleteSnapshots(*DeleteSnapshotsRequest, DaemonCtl_DeleteSnapshotsServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteSnapshots not implemented")
}
func (UnimplementedDaemonCtlServer) Restore(DaemonCtl_RestoreServer) error {
	return status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedDaemonCtlServer) CancelRestore(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRestore not implemented")
}
func (UnimplementedDaemonCtlServer) WipeCloud(context.Context, *WipeCloudRequest) (*WipeCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WipeCloud not implemented")
}
func (UnimplementedDaemonCtlServer) ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedDaemonCtlServer) MakeBucket(context.Context, *MakeBucketRequest) (*MakeBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBucket not implemented")
}
func (UnimplementedDaemonCtlServer) CheckBucketPassword(context.Context, *CheckBucketPasswordRequest) (*CheckBucketPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBucketPassword not implemented")
}
func (UnimplementedDaemonCtlServer) LogStream(*LogStreamRequest, DaemonCtl_LogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method LogStream not implemented")
}
func (UnimplementedDaemonCtlServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedDaemonCtlServer) mustEmbedUnimplementedDaemonCtlServer() {}

// UnsafeDaemonCtlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonCtlServer will
// result in compilation errors.
type UnsafeDaemonCtlServer interface {
	mustEmbedUnimplementedDaemonCtlServer()
}

func RegisterDaemonCtlServer(s grpc.ServiceRegistrar, srv DaemonCtlServer) {
	s.RegisterService(&DaemonCtl_ServiceDesc, srv)
}

func _DaemonCtl_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaemonStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).Status(ctx, req.(*DaemonStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_CheckConn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).CheckConn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/CheckConn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).CheckConn(ctx, req.(*CheckConnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_ReadDaemonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).ReadDaemonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/ReadDaemonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).ReadDaemonConfig(ctx, req.(*ReadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_WriteToDaemonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).WriteToDaemonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/WriteToDaemonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).WriteToDaemonConfig(ctx, req.(*WriteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_CancelBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).CancelBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/CancelBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).CancelBackup(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_ReadAllSnapshotsMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllSnapshotsMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).ReadAllSnapshotsMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/ReadAllSnapshotsMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).ReadAllSnapshotsMetadata(ctx, req.(*ReadAllSnapshotsMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_ReadSnapshotPaths_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadSnapshotPathsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonCtlServer).ReadSnapshotPaths(m, &daemonCtlReadSnapshotPathsServer{stream})
}

type DaemonCtl_ReadSnapshotPathsServer interface {
	Send(*ReadSnapshotPathsResponse) error
	grpc.ServerStream
}

type daemonCtlReadSnapshotPathsServer struct {
	grpc.ServerStream
}

func (x *daemonCtlReadSnapshotPathsServer) Send(m *ReadSnapshotPathsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DaemonCtl_DeleteSnapshots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteSnapshotsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonCtlServer).DeleteSnapshots(m, &daemonCtlDeleteSnapshotsServer{stream})
}

type DaemonCtl_DeleteSnapshotsServer interface {
	Send(*DeleteSnapshotsResponse) error
	grpc.ServerStream
}

type daemonCtlDeleteSnapshotsServer struct {
	grpc.ServerStream
}

func (x *daemonCtlDeleteSnapshotsServer) Send(m *DeleteSnapshotsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DaemonCtl_Restore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DaemonCtlServer).Restore(&daemonCtlRestoreServer{stream})
}

type DaemonCtl_RestoreServer interface {
	SendAndClose(*RestoreResponse) error
	Recv() (*RestoreRequest, error)
	grpc.ServerStream
}

type daemonCtlRestoreServer struct {
	grpc.ServerStream
}

func (x *daemonCtlRestoreServer) SendAndClose(m *RestoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *daemonCtlRestoreServer) Recv() (*RestoreRequest, error) {
	m := new(RestoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DaemonCtl_CancelRestore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).CancelRestore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/CancelRestore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).CancelRestore(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_WipeCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WipeCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).WipeCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/WipeCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).WipeCloud(ctx, req.(*WipeCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/ListBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).ListBuckets(ctx, req.(*ListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_MakeBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).MakeBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/MakeBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).MakeBucket(ctx, req.(*MakeBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_CheckBucketPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBucketPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).CheckBucketPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/CheckBucketPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).CheckBucketPassword(ctx, req.(*CheckBucketPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonCtl_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DaemonCtlServer).LogStream(m, &daemonCtlLogStreamServer{stream})
}

type DaemonCtl_LogStreamServer interface {
	Send(*LogStreamResponse) error
	grpc.ServerStream
}

type daemonCtlLogStreamServer struct {
	grpc.ServerStream
}

func (x *daemonCtlLogStreamServer) Send(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DaemonCtl_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonCtlServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DaemonCtl/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonCtlServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DaemonCtl_ServiceDesc is the grpc.ServiceDesc for DaemonCtl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DaemonCtl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DaemonCtl",
	HandlerType: (*DaemonCtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _DaemonCtl_Hello_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _DaemonCtl_Version_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _DaemonCtl_Status_Handler,
		},
		{
			MethodName: "CheckConn",
			Handler:    _DaemonCtl_CheckConn_Handler,
		},
		{
			MethodName: "ReadDaemonConfig",
			Handler:    _DaemonCtl_ReadDaemonConfig_Handler,
		},
		{
			MethodName: "WriteToDaemonConfig",
			Handler:    _DaemonCtl_WriteToDaemonConfig_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _DaemonCtl_Backup_Handler,
		},
		{
			MethodName: "CancelBackup",
			Handler:    _DaemonCtl_CancelBackup_Handler,
		},
		{
			MethodName: "ReadAllSnapshotsMetadata",
			Handler:    _DaemonCtl_ReadAllSnapshotsMetadata_Handler,
		},
		{
			MethodName: "CancelRestore",
			Handler:    _DaemonCtl_CancelRestore_Handler,
		},
		{
			MethodName: "WipeCloud",
			Handler:    _DaemonCtl_WipeCloud_Handler,
		},
		{
			MethodName: "ListBuckets",
			Handler:    _DaemonCtl_ListBuckets_Handler,
		},
		{
			MethodName: "MakeBucket",
			Handler:    _DaemonCtl_MakeBucket_Handler,
		},
		{
			MethodName: "CheckBucketPassword",
			Handler:    _DaemonCtl_CheckBucketPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _DaemonCtl_ChangePassword_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadSnapshotPaths",
			Handler:       _DaemonCtl_ReadSnapshotPaths_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteSnapshots",
			Handler:       _DaemonCtl_DeleteSnapshots_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Restore",
			Handler:       _DaemonCtl_Restore_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "LogStream",
			Handler:       _DaemonCtl_LogStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/rpc.proto",
}
