syntax = "proto3";

option go_package = "github.com/fsctl/tless/rpc";

package rpc;

// The greeting service definition.
service DaemonCtl {
  // Sends the console user's username+homedir to establish connectivity
  // and initialize the daemon with correct config.toml path
  rpc Hello (HelloRequest) returns (HelloReply) {}

  // Gets the status of the daemon
  rpc Status (DaemonStatusRequest) returns (DaemonStatusResponse) {}

  // Commands daemon to check connection to object store and report back
  rpc CheckConn (CheckConnRequest) returns (CheckConnResponse) {}

  // Commands to synchronize config between client and daemon
  rpc ReadDaemonConfig (ReadConfigRequest) returns (ReadConfigResponse) {}
  rpc WriteToDaemonConfig (WriteConfigRequest) returns (WriteConfigResponse) {}
}

// Initial connect request with information about console logged-in user
message HelloRequest {
  string username = 1;
  string userHomeDir = 2;
}

// TODO:  return last backup timestamp
message HelloReply {
  string message = 1;
}

message DaemonStatusRequest {}

message DaemonStatusResponse {
  enum State {
    IDLE = 0;
    CHECKING_CONN = 1;
    BACKING_UP = 2;
    RESTORING = 3;
  }
  State status = 1;
  string msg = 2;
  float percentage = 3;
}

message CheckConnRequest {
  string Endpoint = 1;
  string AccessKey = 2;
  string SecretKey = 3;
  string BucketName = 4;
}

message CheckConnResponse {
  enum CheckConnResult {
    SUCCESS = 0;
    ERROR = 1;
  }
  CheckConnResult result = 1;
  string errorMsg = 2;
}

message ReadConfigRequest {}

message ReadConfigResponse {
  string Endpoint = 1;
  string AccessKey = 2;
  string SecretKey = 3;
  string BucketName = 4;
  string MasterPassword = 5;
  string Salt = 6;
  repeated string Dirs = 7;
  repeated string Excludes = 8;

  bool IsValid = 9;
  string ErrMsg = 10;
}

message WriteConfigRequest {
  string Endpoint = 1;
  string AccessKey = 2;
  string SecretKey = 3;
  string BucketName = 4;
  string MasterPassword = 5;
  string Salt = 6;
  repeated string Dirs = 7;
  repeated string Excludes = 8;
}

message WriteConfigResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
}
