syntax = "proto3";

option go_package = "github.com/fsctl/tless/rpc";

package rpc;

service DaemonCtl {
  // Sends the console user's username+homedir to establish connectivity
  // and initialize the daemon with correct config.toml path
  rpc Hello (HelloRequest) returns (HelloResponse) {}

  // Provides daemon version
  rpc Version (VersionRequest) returns (VersionResponse) {}

  // Gets the status of the daemon
  rpc Status (DaemonStatusRequest) returns (DaemonStatusResponse) {}

  // Commands daemon to check connection to object store and report back
  rpc CheckConn (CheckConnRequest) returns (CheckConnResponse) {}

  // Commands to synchronize config between client and daemon
  rpc ReadDaemonConfig (ReadConfigRequest) returns (ReadConfigResponse) {}
  rpc WriteToDaemonConfig (WriteConfigRequest) returns (WriteConfigResponse) {}

  // Backup command
  rpc Backup (BackupRequest) returns (BackupResponse) {}
  rpc CancelBackup (CancelRequest) returns (CancelResponse) {}

  // Commands for retrieving and pruning snapshots
  rpc ReadAllSnapshotsMetadata (ReadAllSnapshotsMetadataRequest) returns (ReadAllSnapshotsMetadataResponse) {}  // <-- being replaced by following two
  rpc ReadSnapshotPaths (ReadSnapshotPathsRequest) returns (stream ReadSnapshotPathsResponse) {}
  rpc DeleteSnapshots (DeleteSnapshotsRequest) returns (stream DeleteSnapshotsResponse) {}

  // Restore command
  rpc Restore (stream RestoreRequest) returns (RestoreResponse) {}
  rpc CancelRestore (CancelRequest) returns (CancelResponse) {}

  // Special operations
  rpc WipeCloud (WipeCloudRequest) returns (stream WipeCloudResponse) {}

  // Bucket operations
  rpc ListBuckets (ListBucketsRequest) returns (ListBucketsResponse) {}
  rpc MakeBucket (MakeBucketRequest) returns (MakeBucketResponse) {}
  rpc CheckBucketPassword (CheckBucketPasswordRequest) returns (CheckBucketPasswordResponse) {}

  // Misc RPCs
  rpc LogStream (LogStreamRequest) returns (stream LogStreamResponse) {}
  rpc ChangePassword (ChangePasswordRequest) returns (ChangePasswordResponse) {}
  rpc GeneratePassphrase (GeneratePassphraseRequest) returns (GeneratePassphraseResponse) {}
}

message HelloRequest {
  string username = 1;
  string userHomeDir = 2;
}

message HelloResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
}

message VersionRequest {}

message VersionResponse {
  string Version = 1;
  string CommitHash = 2;
}

message DaemonStatusRequest {}

message ReportedEvent {
  enum ReportedEventKind {
    ErrOperationNotPermitted = 0;
    InfoBackupCompleted = 1;
    ErrIncompatibleBucketVersion = 2;
    InfoBackupCompletedWithErrors = 3;
    InfoBackupCanceled = 4;
    InfoAutopruneCompleted = 5;
  }
  ReportedEventKind Kind = 1;
  string Path = 2;
  bool IsDir = 3;
  int64 Datetime = 4;
  string Msg = 5;
}

message DaemonStatusResponse {
  enum State {
    IDLE = 0;
    CHECKING_CONN = 1;
    BACKING_UP = 2;
    RESTORING = 3;
    NEED_HELLO = 4;
    CLEANING_UP = 5;
  }

  State status = 1;
  string msg = 2;
  float percentage = 3;
  repeated ReportedEvent reportedEvents = 4;
}

message CheckConnRequest {
  string Endpoint = 1;
  string AccessKey = 2;
  string SecretKey = 3;
  string BucketName = 4;
  bool TrustSelfSignedCerts = 5;
}

message CheckConnResponse {
  enum CheckConnResult {
    SUCCESS = 0;
    ERROR = 1;
  }
  CheckConnResult result = 1;
  string errorMsg = 2;
}

message ReadConfigRequest {}

message ReadConfigResponse {
  string Endpoint = 1;
  string AccessKey = 2;
  string SecretKey = 3;
  string BucketName = 4;
  bool TrustSelfSignedCerts = 5;
  string MasterPassword = 6;
  string Salt = 7;
  repeated string Dirs = 8;
  repeated string Excludes = 9;
  bool Verbose = 10;
  string CachesPath = 11;
  int64 MaxChunkCacheMb = 12;
  string ResourceUtilization = 13;

  bool IsValid = 14;
  string ErrMsg = 15;
}

message WriteConfigRequest {
  string Endpoint = 1;
  string AccessKey = 2;
  string SecretKey = 3;
  string BucketName = 4;
  bool TrustSelfSignedCerts = 5;
  string MasterPassword = 6;
  repeated string Dirs = 7;
  repeated string Excludes = 8;
  bool Verbose = 9;
  string CachesPath = 10;
  int64 MaxChunkCacheMb = 11;
  string ResourceUtilization = 12;
}

message WriteConfigResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
}

message BackupRequest {
  bool ForceFullBackup = 1;
}

message BackupResponse {
  bool IsStarting = 1;
  string ErrMsg = 2;
}

message CancelRequest {}

message CancelResponse {
  bool IsStarting = 1;
  string ErrMsg = 2;
}

message ReadAllSnapshotsMetadataRequest {}

message SnapshotMetadata {
  string BackupName = 1;
  string SnapshotName = 2;
  int64 SnapshotTimestamp = 3;
  string SnapshotRawName = 4;
}

message ReadAllSnapshotsMetadataResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
  repeated SnapshotMetadata SnapshotMetadata = 3;
}

message ReadSnapshotPathsRequest {
  string BackupName = 1;
  string SnapshotName = 2;
}

message ReadSnapshotPathsResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
  repeated string RelPaths = 3;
  double PercentDone = 4;
}

message DeleteSnapshotsRequest {
  repeated string SnapshotRawNames = 1;
}

message DeleteSnapshotsResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
  double PercentDone = 3;
}

message RestoreRequest {
  string SnapshotRawName = 1;
  string RestorePath = 2;
  repeated string SelectedRelPaths = 3;
}

message RestoreResponse {
  bool isStarting = 1;
  string ErrMsg = 2;
}

message WipeCloudRequest {}

message WipeCloudResponse {
  bool DidSucceed = 1;
  double PercentDone = 2;
  string ErrMsg = 3;
}

message ListBucketsRequest {}

message ListBucketsResponse {
  repeated string Buckets = 1;
  string ErrMsg = 2;
}

message MakeBucketRequest {
  string BucketName = 1;
  string Region = 2;
}

message MakeBucketResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
}

message CheckBucketPasswordRequest {
  string BucketName = 1;
  string Password = 2;
}

message CheckBucketPasswordResponse {
  enum CheckBucketPasswordResult {
    SUCCESS = 0;
    ERR_PASSWORD_WRONG = 1;
    ERR_OTHER = 2;
    ERR_INCOMPATIBLE_BUCKET_VERSION = 3;
  }
  CheckBucketPasswordResult Result = 1;
  string ErrMsg = 2;
}

message LogStreamRequest {
  string LogPath = 1;
  int64 StartingOffset = 2;
}

message LogStreamResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
  repeated string LogLines = 3;
  int64 NextOffset = 4;
  double PercentDone = 5;
}

message ChangePasswordRequest {
  string OldPassword = 1;
  string NewPassword = 2;
  bool UpdateConfigFile = 3;
}

message ChangePasswordResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
}

message GeneratePassphraseRequest { }

message GeneratePassphraseResponse {
  bool DidSucceed = 1;
  string ErrMsg = 2;
  string Passphrase = 3;
}